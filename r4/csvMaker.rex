/* CsvMaker.rex

 usage :
  r4 CsvMaker formName, formCaption, csvFileName

 where :
  the 1st line within 'csvFileName' is a CSV column header line

 description :

  CSV files are an excellent representation of a 2-dimensional text table.
  Often it is necessary to have a fill-in-the-blank form that defines a
  new set of values for the last row of the CSV file. TopHat provides the
  form display capabilities. A program is also necessary, which processes
  the values acquired by TopHat.

  The CSVMAKER program generates the TopHat form definition file. In addition,
  CSVMAKER generates the REXX program that processes form input.

  Since CSV files use double-quotes to encapsulate values that contain commas, the CSVMAKER
  program is considerably challenged with respect to quoting the generated program;
  especially the generated 'enquoteIfNecessary' internal procedure.

  given the first line of a CSV file,
   the CSVMAKER program generates a fill-in-the-blank form definition -- formName.TopHat
   and the corresponding program that processes form entries          -- formName.rex
*/

parse arg formName',' formCaption',' csvFileName

if csvFileName = '' then
  call usagemsg 'A CSV file name is required'

if formName = '' then
  call usagemsg 'A form name is required'

if formCaption = '' then
  call usagemsg 'A form caption is required'

formName = strip( formName )
formCaption = strip( formCaption )
csvFileName = strip( csvFileName )

 /* ensure CSV file exists */

if \ stream( csvFileName, 'C', 'Exists' ) then
  call usagemsg 'The named CSV file,' csvFileName', does NOT exist ??'

 /* prepare output file names */

formFileName = formName'.TopHat'

formProgramName = formName'.rex'

trace off /* ignore nonzero return codes from the MsgBox program */

msgboxStyle = 1 + 32 + 256 /* Ok_Cancel + iconQuestion + defaultButton2 */

 /* prompt to determine if replacement of existing files is desired */

if stream( formFileName, 'C', 'Exists' ) then do
  'MsgBox -CCsvMaker -S'msgboxStyle' File' formFileName 'already exists. Do you want to replace it ?'
  if rc <> 1 then
    exit 1 
  end

if stream( formProgramName, 'C', 'Exists' ) then do
  'MsgBox -CCsvMaker -S'msgboxStyle' File' formProgramName 'already exists. Do you want to replace it ?'
  if rc <> 1 then
    exit 1 
  end

if lines( csvFileName ) < 1 then
  call usagemsg 'File' csvFileName 'is empty ??'

line1 = linein( csvFileName )

if pos( ',', line1 ) = 0 then
  call usagemsg 'The 1st line of file' csvFileName 'does not contain any commas ??' || '0a'x ,
  	|| 'The 1st line should contain comma separated column heading names.'

 /* eliminate prior form file contents */

if stream( formFileName, 'C', 'Exists' ) then
  'erase' formFileName

 /* prepare leading lines of form file */

call lineout formFileName , ';' formFileName '-- generated by CsvMaker.rex on' date( 'W' )',' date() 'at' time(), 1
call lineout formFileName , ''
call lineout formFileName , '; This defines the input fields associated with CSV file' csvFileName 
call lineout formFileName , ''
call lineout formFileName , "; The first line below does NOT begin with 'get' followed by a space,"
call lineout formFileName , '; which indicates TopHat will operate in computation mode'
call lineout formFileName , ''
call lineout formFileName , ''
call lineout formFileName , formCaption
call lineout formFileName , ''
call lineout formFileName , '; the only tab associated with program --' formProgramName
call lineout formFileName , ''
call lineout formFileName , formName','formName','formCaption

 /* split CSV file heading line into input fields */

nColumns = split( line1, 'HEADING.' )

if nColumns > 32 then
  call usagemsg 'TopHat only supports 32 fields.' || '0a'x ,
    'Your CSV file has' nColumns 'columns'.

 /* prepare form input fields */

do i=1 to nColumns
  call lineout formFileName , ' I,"'heading.i'",-,"Enter 'heading.i 'value"'
  end

 /* eliminate prior program file contents */

if stream( formProgramName, 'C', 'Exists' ) then
  'erase' formProgramName

 /* prepare program that adds input fields to the end of the CSV file */

call lineout formProgramName , '/*' formProgramName '-- generated by CsvMaker.rex on' date( 'W' )',' date() 'at' time(), 1
call lineout formProgramName , ''
call lineout formProgramName , ' this program adds a line to file:' csvFileName
call lineout formProgramName , ''
call lineout formProgramName , '  this program communicates with TopHat.EXE via the registry'
call lineout formProgramName , ''
call lineout formProgramName , ' a tab delimited request is received from registry value:'
call lineout formProgramName , '  HKLM\Software\Kilowatt Software\R4\'formName'[Request]'
call lineout formProgramName , '*/'
call lineout formProgramName , ''
call lineout formProgramName , 'tab = d2c( 9 )'
call lineout formProgramName , ''
call lineout formProgramName , '/* get TopHat request */'
call lineout formProgramName , ''
call lineout formProgramName , 'request = value( "HKLM\Software\Kilowatt Software\R4\' || formName || '[Request]", , "Registry" )'
call lineout formProgramName , ''
call lineout formProgramName , '/* parse tab delimited request fields */'
call lineout formProgramName , ''
call lineout formProgramName , 'parse var request ,'

 /* get input values from TopHat */

do i=1 to nColumns

   /* the input field name is the same as the heading with runs of spaces and tabs
    * replaced by a single underscore
	*/

  field.i = space( translate( heading.i, ' ', '09'x ), 1, '_' )

   /* get input field value */

  call lineout formProgramName , '  'field.i '(tab)' ,
    || copies( ' ,', i <> nColumns ) /* add continuation character, unless it's the last line */
  end

call lineout formProgramName , ''
call lineout formProgramName , '/* append a line to the CSV file */'
call lineout formProgramName , ''

call lineout formProgramName , 'call lineout "'csvFileName'", ,'

do i=1 to nColumns
  call lineout formProgramName , '  'copies( '|| "," ||', i > 1 ) ,
    'enquoteIfNecessary(' field.i ')' ,
    copies( ',', i <> nColumns ) /* add continuation character, unless it's the last line */
  end

call lineout formProgramName , 'exit 0'

call lineout formProgramName , ''
call lineout formProgramName , ' /* procedure enquoteIfNecessary'
call lineout formProgramName , '  *  the argument is returned as-is if it does not contain commas'
call lineout formProgramName , '  *'
call lineout formProgramName , '  *  otherwise, the argument is wrapped with double-quotes'
call lineout formProgramName , '  *  and, interior double-quotes are doubled'
call lineout formProgramName , '  */'
call lineout formProgramName , ''
call lineout formProgramName , 'enquoteIfNecessary : procedure'
call lineout formProgramName , '  s = arg( 1 )'
call lineout formProgramName , '  if verify( arg( 1 ), '',"'', "M" ) = 0 then /* no commas or dquotes */'
call lineout formProgramName , '    return s'
call lineout formProgramName , '  if pos( ''"'', arg( 1 ) ) = 0 then'
call lineout formProgramName , '    return ''"''arg( 1 )''"'''
call lineout formProgramName , '  r = ''"'' /* result -- has leading double-quote */'
call lineout formProgramName , '  s = arg( 1 )'
call lineout formProgramName , '  do while s <> ""'
call lineout formProgramName , '    if s = ''"'' then'
call lineout formProgramName , '      return r''"""'''
call lineout formProgramName , '    if left( s, 1 ) = ''"'' then do'
call lineout formProgramName , '      r = r''""'' /* double interior double-quote */'
call lineout formProgramName , '      s = substr( s, 2 )'
call lineout formProgramName , '      iterate'
call lineout formProgramName , '      end'
call lineout formProgramName , '    parse var s front ''"'' rest'
call lineout formProgramName , '    r = r || front'
call lineout formProgramName , '    s = ''"''rest'
call lineout formProgramName , '    end'
call lineout formProgramName , '  return r''"'' /* trailing double-quote */'
  
exit 0

 /* procedure SPLIT
  * splits a comma-separated value line into its constituent fields
  * the 'stem' parameter identifies a collection of compound variables to assign
  *
  * on return,
  *  STEM.length -- is the number of compound variables assigned
  *  STEM.1 -- is the first field value
  *  STEM.2 -- is the second field value
  *   .
  *   . [etc]
  *   .
  *
  * result:
  *  STEM.length is returned
  */

split :

  parse arg lin , stem

  lineToParse = lin /* keep a copy of the line */

  nFields = 0

  /* the simplest CSV line format just separates fields with commas.
   * this implies the line has no double-quotes.
   */

  if pos( '"', lin ) = 0 then do /* simple case */
    do while lin <> ''
	  nFields = nFields + 1
	  parse var lin field ',' lin
	  call value stem || nFields, field /* assign field */
	  end
    end

  else do

    /* double-quotes bracket field values that contain commas.
     * if the field also contains a double-quote, then these are paired.
     */

    do while lin <> ''
      nFields = nFields + 1
	  if left( lin, 1 ) <> '"' then
	    parse var lin field ',' lin   /* simple field */
	  else do
	    field = ''
        do while lin <> ''
  	      parse var lin . +1 segment '"' lin
  	      if left( lin, 1 ) = '"' then  /* double-quote */
		    field = field'"'segment
		  else do
		    field = field || segment
		    if left( lin, 1 ) = ',' then
		      lin = substr( lin, 2 )
		    else if lin <> '' then do
		      note = 'Line' lno 'is incorrectly formatted' || '0a'x ,
			    || 'The incorrect line is:' lineToParse
		      call usagemsg note
			  end
		    leave
		    end
  	      end
	    end

      call value stem || nFields, field /* assign field */
      end
    end

  call value stem'LENGTH', nFields /* STEM.LENGTH => #fields */

  return nFields

 /* procedure USAGEMSG
  * show usage information, and optional note
  */

usagemsg : procedure

  trace off /* ignore nonzero return codes from the MsgBox program */

  if arg( 1 ) <> '' then
    'MsgBox' arg( 1 )

  call lineout !, 'Usage: r4 CsvMaker formName, formCaption, csvFileName'
  call lineout !, ''
  call lineout !, 'Where :'
  call lineout !, "  the 1st line within 'csvFileName' is a CSV column header line"
  call lineout !, ''

  call lineout !, 'Description :'
  call lineout !, '  the CSVMAKER program generates a file in the blank form definition -- formName.TopHat'
  call lineout !, '  and the corresponding program that processes form entries          -- formName.rex'
  exit 99
     

